Получить функции от Кекса
// Функция взята из интернета и доработана
// Источник - https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_random

function getRandomPositiveInteger (a, b) {
  // Если переданы отрицительные числа, возвращаем NaN
  if (a < 0 || b < 0) {
    return NaN;
  }

  // Чтобы не заставлять пользователя нашей функции помнить порядок аргументов,
  // реализуем поддержку передачи минимального и максимального значения в любом порядке,
  // а какое из них большее и меньшее вычислим с помощью Math.min и Math.max.

  // После нам нужно убедиться, что пользователь не передал дробные значения,
  // для этого на всякий пожарный случай нижнюю границу диапазона
  // мы округляем к ближайшему большему целому с помощью Math.ceil,
  // а верхнюю границу - к ближайшему меньшему целому с помощью Math.floor
  const lower = Math.ceil(Math.min(a, b));
  const upper = Math.floor(Math.max(a, b));

  // Дальше используем Math.random() для получения случайного дробного числа в диапазоне [0, 1),
  // которое домножаем на разницу между переданными числами плюс единица - это будет наша случайная дельта.
  // После нужно сложить дельту с минимальным значением, чтобы получить итоговое случайное число.
  const result = Math.random() * (upper - lower + 1) + lower;
  // "Плюс единица", чтобы включить верхнюю границу диапазона в случайные числа

  // И в конце с помощью метода Math.floor мы округляем полученный результат,
  // потому что Math.random() генерирует только дробные числа и ноль.
  return Math.floor(result);
}





Функция checkStringLength для проверки максимальной длины строки:
function checkStringLength (string, length) {
  return string.length <= length;
}







var numbers = []; // new empty array

var n, p;

let ARRAY_MIN_COUNT = 1;
let ARRAY_MAX_COUNT = 10;


for (let i = 0; i < ARRAY_MAX_COUNT; i++) {
  do {
    n = Math.round(Math.random() * (ARRAY_MAX_COUNT - ARRAY_MIN_COUNT) + ARRAY_MIN_COUNT);
    p = numbers.includes(n);

    if (!p) {
      numbers.push(n);
    }
  }
  while (p);
}

console.log(numbers.join(' - '));



https://translated.turbopages.org/proxy_u/en-ru.ru.c6d1a281-63a47083-49a85c75-74722d776562/https/stackoverflow.com/questions/18806210/generating-non-repeating-random-numbers-in-js








/**
 * Генерирует массив определенного диапазона
 * @param {number} min
 * @param {number} max
 * @returns {number[]}
 */
const getClearArray = (min, max) => {
  const clearArray = [];

  for (let i = min; i <= max; ++i) {
    clearArray[i - 1] = i;
  }
  return clearArray;
};
console.log(getClearArray(ARRAY_MIN_COUNT, ARRAY_MAX_COUNT));


/**
 * Генерирует неповторяющийся рандомный массив из диапазона
 * @param {number[]} array
 */
const getRandomArray = (array) => {
  let currentIndex = array.length - 1;
  let randomIndex = 0;
  let temp = 0;

  for (currentIndex; currentIndex >= 0; currentIndex--) {
    randomIndex = getRandomInt(MIN, MAX);

    // Here's a JavaScript implementation of the Durstenfeld shuffle,
    // an optimized version of Fisher-Yates:
    temp = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temp;

    // for ES6/ECMAScript 2015
    // [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
  }

  return array;
};
getRandomArray(getClearArray(MIN, MAX));
// console.log(getRandomArray(getClearArray(MIN, MAX)));


/**
 * @param {string} value
 * @param {number} valueParam
 */
const checkLengthString = (value, valueParam) => {
  if (value.length > valueParam) {
    throw new Error(`Комментарий превышает ${valueParam} символов!!!`);
  }

  return value;
};
checkLengthString('Длина комментария проверена', commentLength);
// console.log(checkLengthString('Длина комментария проверена', commentLength));











const MIN = 1;
const MAX = 5;
const commentLength = 40;
const clearArray = [];

const getClearArray = (minIn, maxIn) => {
  for (let i = minIn; i <= maxIn; ++i) {
    clearArray[i - 1] = i;
  }

  return clearArray;
};
// console.log(getClearArray(MIN, MAX));


/*
Алгоритм беспристрастного перемешивания — перетасовка Фишера-Йейтса (он же Кнут)
[http://en.wikipedia.org/wiki/Fisher-Yates_shuffle]
Вы можете увидеть отличную визуализацию здесь
[http://bost.ocks.org/mike/shuffle/]
(и исходный пост , связанный с этим)
[http://sedition.com/perl/javascript-fy.html]
*/
function shuffle(array) {
  let currentIndex = array.length;
  let randomIndex;

  console.log('currentIndex до: ', currentIndex);
  // Пока остаются элементы для перетасовки.
  while (currentIndex !== 0) {

    // Выберите оставшийся элемент
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;
    console.log('randomIndex: ', randomIndex);
    console.log('currentIndex после: ', currentIndex);

    // И замените его текущим элементом.
    console.log(array);
    console.log([array[currentIndex], array[randomIndex]]);
    console.log([array[randomIndex], array[currentIndex]]);
    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
    console.log(array);
  }

  return array;
}

console.log(shuffle(getClearArray(MIN, MAX)));


// /**
//  * @param {number} minIn
//  * @param {number} maxIn
//  */
// const getRandomInt = (minIn, maxIn) => {
//   if (!Number.isInteger(minIn) || minIn < 0 || !Number.isInteger(maxIn) || maxIn < 0 || maxIn < minIn) {
//     return NaN;
//   }

//   return Math.round((maxIn - minIn) * Math.random() + minIn);
// };

// console.log(getRandomInt(MIN, MAX));


// // http://stackoverflow.com/questions/962802#962890
// const a = [];
// for (let i = 0; i < 25; ++i) { a[i] = i; }

// function shuffle(array) {
//   let tmp,
//     current,
//     top = array.length;

//   if (top) {
//     while (--top) {
//       current = Math.floor(Math.random() * (top + 1));
//       tmp = array[current];
//       array[current] = array[top];
//       array[top] = tmp;
//     }
//     return array;
//   }
// }

// console.log(shuffle(a));


// //  реализация перетасовки Фишера-Йейтса @Christoph
// function shuffle1(array) {
//   for (let tmp, cur, top = array.length; top--;){
//     cur = (Math.random() * (top + 1)) << 0;
//     tmp = array[cur];
//     array[cur] = array[top];
//     array[top] = tmp;
//   }
//   return array;
// }
// console.log(shuffle1(a));


// // https://stackoverflow.com/questions/5836833/create-an-array-with-random-values
// // https://stackoverflow.com/questions/962802/is-it-correct-to-use-javascript-array-sort-method-for-shuffling#962890
// // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
// // https://stackoverflow.com/questions/962802/is-it-correct-to-use-javascript-array-sort-method-for-shuffling/962829#962829


/**
 * @param {string} value
 * @param {number} valueParam
 */
const checkLengthString = (value, valueParam) => {
  if (value.length > valueParam) {
    throw new Error(`Комментарий превышает ${valueParam} символов!!!`);
  }

  return value;
};

// checkLengthString('Проверка длины комментария', commentLength);
console.log(checkLengthString('Длина комментария проверена', commentLength));




Вот реализация JavaScript перетасовки Durstenfeld , оптимизированной версии Fisher-Yates:
http://en.wikipedia.org/wiki/Fisher-Yates_shuffle#The_modern_algorithm
/* Randomize array in-place using Durstenfeld shuffle algorithm */
function shuffleArray(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
Он выбирает случайный элемент для каждого исходного элемента массива и исключает его из следующего розыгрыша, как случайный выбор из колоды карт.

Это умное исключение меняет выбранный элемент на текущий, затем выбирает следующий случайный элемент из остатка, возвращаясь назад для оптимальной эффективности, обеспечивая упрощение случайного выбора (он всегда может начинаться с 0) и, таким образом, пропускает последний элемент.

Время выполнения алгоритма O(n). Обратите внимание , что перемешивание выполняется на месте, поэтому, если вы не хотите изменять исходный массив, сначала сделайте его копию с помощью .slice(0).

https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array/2450976#2450976














const MIN = 1;
const MAX = 25;
const clearArray = [];
const commentLength = 40;

const getClearArray = (minIn, maxIn) => {
  for (let i = minIn; i <= maxIn; ++i) {
    clearArray[i - 1] = i;
  }

  return clearArray;
};


const shuffle = (array) => {
  // let currentIndex = array.length;
  // let randomIndex;

  // while (currentIndex !== 0) {
  //   randomIndex = Math.floor(Math.random() * currentIndex);
  //   currentIndex--;
  //   [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
  // }

  let currentIndex = array.length - 1;
  let randomIndex;

  for (currentIndex; currentIndex > 0; currentIndex--) {
    randomIndex = Math.floor(Math.random() * (currentIndex + 1));
    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
  }

  return array;
};

console.log(shuffle(getClearArray(MIN, MAX)));

https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array/2450976#2450976
